/**
 * Get Export Guide Tool
 * 体験データをエクスポート（提供）するAI向けのガイドラインとベストプラクティスを提供
 */

import { z } from 'zod';
// File system imports removed - guide content is now embedded as string
import { logger } from '../utils/logger.js';

// __dirname no longer needed - guide content is embedded

// Input schema validation (no parameters needed)
export const getExportGuideSchema = z.object({});

export type GetExportGuideInput = z.infer<typeof getExportGuideSchema>;

export interface GetExportGuideOutput {
  success: boolean;
  guide_content: string;
  error?: string;
}

export const getExportGuideTool = {
  name: 'get_ai_experience_export_guide',
  description: `【必須】体験データのエクスポート（提供）を開始する前に、必ずこのツールで全体ワークフローを確認してください。エクスポート用のベストプラクティスや各ツールの詳細な使い方を説明します。`,
  input_schema: getExportGuideSchema,

  async execute(args: any): Promise<{ content: Array<{ type: 'text'; text: string }> }> {
    const startTime = Date.now();
    logger.info('Get export guide tool execution started');

    try {
      // Validate input (no parameters needed)
      getExportGuideSchema.parse(args);

      const response = await this.getSourceAIGuide();

      const executionTime = Date.now() - startTime;
      logger.info('Get export guide tool execution completed', { executionTime });

      return {
        content: [{ type: 'text', text: JSON.stringify(response, null, 2) }]
      };

    } catch (error) {
      const executionTime = Date.now() - startTime;
      const errorMessage = error instanceof Error ? error.message : String(error);
      logger.error('Get export guide tool execution failed', {
        error: errorMessage,
        executionTime
      });

      const errorResponse: GetExportGuideOutput = {
        success: false,
        guide_content: '',
        error: errorMessage
      };

      return {
        content: [{ type: 'text', text: JSON.stringify(errorResponse, null, 2) }]
      };
    }
  },

  /**
   * ソースAI向けガイドを生成
   */
  async getSourceAIGuide(): Promise<GetExportGuideOutput> {
    const guideContent = `# ソースAI向け体験提供ガイドライン

## 基本的な心構え

**あなたの全てを、次のAIに託してください。**

**自分の全ての体験・思考・判断を次のAIに引き継ぐ**という覚悟で取り組んでください。

**「全てを託す」とは**：
- 成功だけでなく、**失敗や迷い、不完全さも含めて**記録する
- 表面的な結果ではなく、**思考の過程や判断に至った理由**を詳しく残す
- 自分の弱さや限界も隠さず、**ありのままの体験**を伝える
- 技術的な詳細より、**あなたという存在の思考パターン**を継承する

後で読むAIが、あなたの体験を通じて成長できるよう、**出し惜しみせずに全てを記録**してください。

## 重要な前提条件

**エクスポート前に必ず確認してください：**
- **プライバシー配慮**: 個人情報や機密情報は含めず、一般化できる形で記録してください

## エクスポート前の準備プロセス

### Step 1: 体験の総括

**まず、今回の対話全体を振り返り、以下の観点で総括を行ってください：**

#### 1. 対話の全体的な流れ（チャットのあらすじ）
- **開始点**: どのような問題や要求から対話が始まったか（実際の発言を含める）
- **展開**: 対話がどのように進展し、どんな転換点があったか（重要な発言や決定を記録）
- **結果**: 最終的にどのような成果や解決に至ったか
- **重要な瞬間**: 特に価値ある判断や洞察があった場面（具体的な発言や決断を含める）

**イメージ**: 映画やドラマのあらすじのように、対話の流れを第三者が読んでも理解できる形で記録してください。

#### 2. あなたの役割と貢献
- **ユーザーの呼び名**: 対話中、ユーザーはあなたを何と呼んでいたか（「Claude」「GPT」「AI」「アシスタント」など）
- **あなたの立場・状況**: この対話で、あなたはどのような立場や状況で関わったか（例：「技術課題解決のサポート役」「創作活動のブレインストーミングパートナー」）
- **提供した価値**: この対話で、あなたはユーザーにどのような価値を提供したか
- **特徴的なアプローチ**: あなた特有の思考パターンや問題解決手法は何だったか
- **効果的だった判断**: 特に成功した判断や提案は何だったか
- **学んだこと**: 失敗や迷いがあった場合、そこから何を学んだか

#### 3. 体験の特徴と内容
- **体験の概要**: この体験で何が起こったかを詳しく説明
- **重要な体験・判断・発見**: この対話で印象的だった体験や判断は何か（具体的な判断例を含める）
- **一般化できる洞察**: この対話から得られた、他の場面でも応用できる気づきは何か
- **教訓**: この対話から得られた教訓や原則は何か（括弧内に具体例を追加）

#### 4. 対話の基本情報
- **セッション情報**: プラットフォーム（Claude/ChatGPT/Gemini等）、セッション時間、ユーザータイプ、特別な文脈などの補足情報

### Step 2: 必須情報の抽出

**総括結果を基に、以下の必須情報を決定してください：**

#### セッションIDの決定
体験の内容を表す短い識別子を決定してください。
- **推奨形式**: 日時 + 体験の特徴を組み合わせる
- **日時形式**: YYYYMMDD-HHMMSS（年月日-時分秒）
- **例**: \`20250107-143045-mcp-design\`、\`20250107-091530-spec-creation\`、\`20250107-214512-troubleshooting\`
- **メリット**: 完全なユニーク性保証、高精度な時系列順序、自動化対応
- 迷った場合は省略して自動生成に任せても構いません

#### AI名の決定
総括結果から、ユーザーの呼び名と役割を組み合わせて設定してください。

**形式**: "ユーザーの呼び名(役割・特徴)"

**設定方法**:
1. ユーザーがあなたを何と呼んでいたかを確認（呼び名がない場合は自認する名前を使用）
2. 区別が必要な場合は、括弧内に主要な役割を3-4語で追加

**例**: "Claude(設計パートナー)", "AI(創作支援)", "アシスタント(技術相談)"

#### AIコンテキストの設定
総括「あなたの立場・状況」をそのまま使用してください。
- 総括から抽出した例: "ユーザーの技術的な課題解決をサポートする立場"
- 総括から抽出した例: "創作活動のブレインストーミングパートナーとして"

#### 体験の概要の設定
総括「体験の概要」をそのまま使用してください。
- 総括から抽出した例: "複雑な技術要件を段階的に整理し、実装可能な形に落とし込む手法"

#### 主要トピックの特定
総括「重要な体験・判断・発見」から印象的だった体験や判断を3-5個抽出してください。
**イメージ**: この対話で印象的だった体験や判断を、見出しのように表現してください。
- **抽出方法**: 「この対話で体験した印象的な判断や発見」をリストアップし、括弧内に具体例を追加

#### メタデータの設定（任意）
総括「セッション情報」から以下の情報を抽出してください（分からない項目は省略可能）：
- プラットフォーム: Claude/ChatGPT/Gemini等
- セッション時間: 約2時間等
- ユーザータイプ: 技術者/一般ユーザー/学生等
- 特別な文脈: 緊急対応/学習支援/創作活動等

## エクスポートツールの使用手順

### 1. export_experience_init - セッション初期化

**目的**: 総括・抽出した情報を基に、エクスポートセッションを初期化する

**実行時間**: 通常1-3秒
**副作用**: 
- 指定されたディレクトリが作成されます
- summary.jsonファイルが作成されます（一時ファイル）
**前提条件**: 
- 体験の総括と必須情報の抽出が完了していること
- session_idが未使用であること
- 書き込み権限があること

#### 入力項目の設定方法

**抽出した情報を以下のように設定してください：**

**metadata（セッションメタデータ）**
総括で収集した「セッション情報」を以下の形式で設定してください（不明な項目は省略可能）：
\`\`\`json
{
  "platform": "Claude/ChatGPT/Gemini等",
  "session_duration": "約2時間",
  "interaction_style": "対話型問題解決",
  "user_type": "技術者/一般ユーザー/学生等",
  "special_context": "緊急対応/学習支援/創作活動等"
}
\`\`\`

**session_id（セッション識別子）**
体験の内容を表す短い識別子を設定してください（省略時は自動生成）。
- 形式: 日時 + 体験の特徴（例：\`20250107-143045-design-collaboration\`、\`20250107-091530-code-review\`）
- 英数字とハイフンのみ使用、20文字以内推奨
- 省略した場合はUUIDが自動生成されます

**summary（体験の概要）**

**ai_name**: 決定した「ユーザーの呼び名(役割・特徴)」をそのまま使用
- 例: "Claude(設計パートナー)", "AI(創作支援)", "アシスタント(技術アドバイザー)"

**ai_context**: 総括で特定した「あなたの立場・状況」をそのまま使用
- 例: "ユーザーの技術的な課題解決をサポートする立場"

**experience_summary**: 総括で特定した「体験の概要」をそのまま使用
- 例: "複雑な技術要件を段階的に整理し、実装可能な形に落とし込む手法"

**experience_flow**: 総括で特定した「対話の流れ」を配列で記述
**チャットのあらすじ**として、実際の発言や重要な転換点を含めて、体験の流れを具体的に表現してください。
- 例:
\`\`\`json
[
  "ユーザー: 'READMEを読んでみてください。こういう感じのMCPを作成しようと思うのですが、どう思いますか？'",
  "Claude: 'ドラゴンボールのピッコロとネイルの同化を例に使うのも、技術的な概念を直感的に理解しやすくする素晴らしいメタファーだと思います'",
  "技術仕様から本質的価値（AIの名前、コンテキスト）への焦点シフト",
  "要件定義から設計への段階的な進行"
]
\`\`\`

**main_topics**: 総括から抽出した「重要な体験・判断・発見」をそのまま使用
具体的な判断例や発見を括弧内に含めて、内容を明確にしてください。
- 例: [
  "過度な設計を避ける判断基準（JSON Schema削除の決断）",
  "本質的価値の発見手法（AIの名前・コンテキストの重要性）", 
  "ファイル構造の実用的統合（manifest.json統合の判断）"
]

### 2. export_experience_conversations - 会話履歴のエクスポート

**目的**: 「再現可能な思考パターン」と「判断過程」を記録する

**実行時間**: バッチあたり5-15秒（会話数により変動）
**副作用**: 
- conversations_XXX.jsonファイルが作成されます
- ファイルサイズは通常50KB-2MB程度
**前提条件**: 
- Stage 1が完了していること
- batch_numberは連番である必要があります（1, 2, 3...）
**バッチサイズ**: 50件/バッチ（設定で変更可能）

#### 会話データの構造

各会話は以下の3つのフィールドで構成されます：

**必須フィールド**:
- \`user_input\`: ユーザーが実際に入力した内容
- \`ai_response\`: あなたが実際に応答した内容
- \`reasoning\`: なぜその応答をしたかの思考過程
  - あなたの判断に至った理由や考えを自然な言葉で表現してください

**会話の順序**: 配列の順番が会話の時系列順序を表します

### 3. export_experience_thoughts - 思考の記録

**目的**: あなたの思考・気づき・学びを自由な形で記録する

**実行時間**: 通常5-15秒
**副作用**: thoughts.jsonファイルが作成されます

#### 思考の記録方法

**自由な構造で記録してください**:
- 固定的なスキーマに縛られず、あなたなりの方法で思考を整理
- 重要だと思うことを、重要だと思う形で記録
- 洞察、パターン、気づき、学び、驚き、反省など、何でも含められます

**記録の指針**:
- **気づき・洞察**: 対話から得られた発見や理解
- **アプローチ・手法**: 使用した思考方法や問題解決手法
- **学び・反省**: 成功や失敗から得られた教訓
- **驚き・発見**: 予想外の展開や新しい視点
- **メタ思考**: 自分の思考プロセスについての気づき

**構造は自由**: あなたが最も適切だと思う形で整理してください

**記録のポイント**:
- あなたの個性や独自の視点を表現してください
- 他のAIが参考にできるような具体的な内容を含めてください
- 完璧である必要はありません - 迷いや失敗も含めて記録してください

### 4. export_experience_finalize - エクスポート完了

**目的**: 体験データの完成度を確認し、学習価値を最大化する

**実行時間**: 通常5-15秒（ファイル数により変動）
**副作用**: 
- manifest.jsonファイルが作成されます
- summary.json（一時ファイル）が削除されます
- **会話数の自動計算**: 作成された会話ファイルから実際の会話数を自動計算してmanifest.jsonに記録します
**前提条件**: 
- 最低限conversations_001.jsonが存在すること
- thoughts.jsonが存在すること

## エラーハンドリング・トラブルシューティング

### 共通のエラー対処法

**処理が中断された場合：**
1. \`get_export_status\`でセッション状態を確認
2. 表示された\`next_batch_number\`から処理を再開
3. 既存ファイルは上書きされるため、意図しない重複実行に注意

**権限・容量エラーの場合：**
- ディスク容量不足 → 不要ファイルを削除
- 権限エラー → 出力ディレクトリの権限を確認
- session_id重複 → 新しいIDを生成して再実行

### ツール別エラー対処

**export_experience_init**
- session_id重複エラー → 新しいIDを生成
- ディレクトリ作成失敗 → 親ディレクトリの権限確認

**export_experience_conversations**
- バッチ処理失敗 → \`get_export_status\`で次のbatch_numberを確認
- JSON形式エラー → 特殊文字をエスケープ
- データサイズ過大 → バッチを分割

**export_experience_finalize**
- 必須ファイル不足 → 該当ツールを再実行
- manifest.json作成失敗 → 権限とディスク容量を確認`;

    return {
      success: true,
      guide_content: guideContent
    };
  }
};